package main

import (
	"fmt"
	"log"
)
bot.Handle("/pp", func(m *TgMessage) {
	var err error

	if m.IsReply() {
		projectName := m.GetProject()
		fmt.Printf("Pause req for project: %+v\n", projectName)
		for _, project := range Config.Projects {
			if projectName == project.Name {
				err = project.CeaseAlerts()
			}
		}
		if err == nil {
			answer := fmt.Sprintf("Messages ceased for project %v", projectName)
			bot.Send(m.Sender, answer)
			//} else {
			//	return err
		}
		//} else {
		// WIP add return error text if not reply
		//return errors.New("Message is not reply")
	}
	//return nil
})

bot.Handle("/up", func(m *TgMessage) {
	var err error

	if m.IsReply() {
		projectName := m.GetProject()
		fmt.Printf("Resume req for project: %+v\n", projectName)
		for _, project := range Config.Projects {
			if projectName == project.Name {
				err = project.EnableAlerts()
			}
		}
		if err == nil {
			answer := fmt.Sprintf("Messages resumed for project %v", projectName)
			bot.Send(m.Sender, answer)
		}
		//} else {
		//	return err
		//}
		//} else {
		// WIP add return error text if not reply
		//return errors.New("Message is not reply")
	}
	//return nil
})

bot.Handle("/pu", func(m *TgMessage) {

	if m.IsReply() {
		uuID := m.GetUUID()
		log.Printf("Pause req for UUID: %+v\n", uuID)
		for _, project := range Config.Projects {
			for _, check := range project.Checks {
				if uuID == check.uuID {
					_ = check.CeaseAlerts()
				}
			}
		}
		if err == nil {
			answer := fmt.Sprintf("Messages ceased for UUID %v", uuID)
			bot.Send(m.Sender, answer)
			//} else {
			//	return err
		}
		//} else {
		// WIP add return error text if not reply
		//return errors.New("Message is not reply")
	}
	//return nil
})

bot.Handle("/uu", func(m *TgMessage) {
	var err error

	if m.IsReply() {
		uuID := m.GetUUID()
		fmt.Printf("Resume req for UUID: %+v\n", uuID)
		for _, project := range Config.Projects {
			for _, check := range project.Checks {
				if uuID == check.uuID {
					err = check.EnableAlerts()
				}
			}
		}
		if err == nil {
			answer := fmt.Sprintf("Messages resume for UUID %v", uuID)
			bot.Send(m.Sender, answer)
			//} else {
			//	return err
		}
		//} else {
		//	// WIP add return error text if not reply
		//	return errors.New("Message is not reply")
	}
	//return nil
})

