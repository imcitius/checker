---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Values.werf.env }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      name: {{ .Values.global.werf.name }}
      app: {{ .Chart.Name }}
  revisionHistoryLimit: 3
  strategy:
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        name: {{ .Values.global.werf.name }}
        app: {{ .Chart.Name }}
      annotations:
        vault.hashicorp.com/role: "vault-injector"
        vault.hashicorp.com/auth-path: "auth/kubernetes-{{ .Values.werf.env }}"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-pre-populate-only: "true"

        vault.hashicorp.com/agent-inject-secret-telegram.env: "secret/{{ .Values.werf.env }}/checker/token"
        vault.hashicorp.com/agent-inject-template-telegram.env: |
          bot_token: {{ "{{" }} with secret "secret/{{ .Values.werf.env }}/checker/token" {{ "-}}" }}{{ "{{-" }} .Data.telegram_token {{ "-}}" }}{{ "{{-" }} end {{ "}}" }}
          noncritical_channel: {{ "{{" }} with secret "secret/{{ .Values.werf.env }}/checker/token" {{ "-}}" }}{{ "{{-" }} .Data.telegram_channel {{ "-}}" }}{{ "{{-" }} end {{ "}}" }}
          critical_channel: {{ "{{" }} with secret "secret/{{ .Values.werf.env }}/checker/token" {{ "-}}" }}{{ "{{-" }} .Data.telegram_channel {{ "-}}" }}{{ "{{-" }} end {{ "}}" }}
        {{ if .Values.db.check }}
        vault.hashicorp.com/agent-inject-secret-pgsql.env: "{{ .Values.db.password_path }}"
        vault.hashicorp.com/agent-inject-template-pgsql.env: |
          {{ "{{" }} with secret "{{ .Values.db.password_path }}" {{ "-}}" }}{{ "{{-" }} .Data.value {{ "-}}" }}{{ "{{-" }} end {{ "}}" }}
        {{ end }}

    spec:
      serviceAccountName: vault-jwt-{{ .Values.werf.env }}
      volumes:
        - name: config
          emptyDir: {}
        - name: consul-ca-file
          projected:
            sources:
              - configMap:
                  name: consul
        - name: config-template
          projected:
            sources:
              - configMap:
                  name: checker-config-template

      imagePullSecrets:
        - name: "{{ .Values.docker.proxy.host }}"

      initContainers:
      - name: template
        image: {{ .Values.docker.proxy.host }}/{{ .Values.docker.proxy.repo }}/hashicorp/consul-template
        command:
          - /bin/consul-template
          - -once
          - -log-level=debug
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: config
            mountPath: /config
          - name: config-template
            mountPath: /template
          - name: consul-ca-file
            mountPath: /consul
        env:
{{ include "consul_creds" . | indent 8 }}
        - name: CT_LOCAL_CONFIG
          value: |
            template {
              source      = "/template/config.yaml.tpl"
              destination = "/config/config.yaml"
              left_delimiter  = "<<"
              right_delimiter = ">>"
            }

      containers:
      - name: checker
        image: {{ .Values.werf.image.checker }}
        command:
          - /checker
          - -c
          - /config/config.yaml
          - check
        ports:
          - containerPort: 80
            protocol: TCP
        volumeMounts:
          - name: config
            mountPath: /config
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "300m"
---
apiVersion: v1
kind: Service
metadata:
  name: checker
spec:
  selector:
    name: {{ .Values.global.werf.name }}
    app: checker
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
